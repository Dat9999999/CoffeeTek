// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  phone_number String @unique
  email        String @unique
  // password hash for security
  hash         String

  first_name String      @default("empty")
  last_name  String      @default("empty")
  is_locked  Boolean     @default(false)
  roles      Role[]      @relation("UserRoles")
  detail     UserDetail?

  customerOrders Order[] @relation("CustomerOrders")

  staffOrders Order[] @relation("StaffOrders")

  @@map("users")
}

model UserDetail {
  id         Int      @id @default(autoincrement())
  birthday   DateTime
  sex        String
  avatar_url String
  address    String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("user_details")
}

model Role {
  id        Int    @id @default(autoincrement())
  role_name String @unique
  users     User[] @relation("UserRoles")

  @@map("roles")
}

model OptionGroup {
  id     Int           @id @default(autoincrement())
  name   String
  values OptionValue[] // 1 group có nhiều value

  @@map("option_groups")
}

model OptionValue {
  id                 Int                  @id @default(autoincrement())
  name               String
  sort_index         Int
  option_group       OptionGroup          @relation(fields: [option_group_id], references: [id])
  option_group_id    Int
  ProductOptionValue ProductOptionValue[]

  @@map("option_values")
}

model Size {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  sort_index  Int
  ProductSize ProductSize[]
  OrderDetail OrderDetail[]

  @@map("sizes")
}

model Category {
  id                 Int     @id @default(autoincrement())
  name               String
  sort_index         Int
  is_parent_category Boolean @default(false)

  parent_category_id Int?
  parent_category    Category?  @relation("CategoryToSubcategories", fields: [parent_category_id], references: [id])
  subcategories      Category[] @relation("CategoryToSubcategories")

  products Product[]

  @@map("categories")
}

model Topping {
  id                 Int                  @id @default(autoincrement())
  name               String
  price              Float
  image_name         String?
  sort_index         Int
  ProductTopping     ProductTopping[]
  ToppingOrderDetail ToppingOrderDetail[]

  @@map("toppings")
}

model Product {
  id             Int     @id @default(autoincrement())
  name           String
  is_multi_size  Boolean @default(false)
  product_detail String?
  price          Float?

  category_id Int? // FK có thể null
  category    Category? @relation(fields: [category_id], references: [id])

  sizes        ProductSize[] // 1 product có nhiều size
  optionValues ProductOptionValue[] // 1 product có nhiều option value
  toppings     ProductTopping[] // 1 product có nhiều topping
  images       ProductImage[]
  orderDetails OrderDetail[]

  @@map("products")
}

model ProductSize {
  id    Int   @id @default(autoincrement())
  price Float

  product_id Int
  size_id    Int

  product Product @relation(fields: [product_id], references: [id])
  size    Size    @relation(fields: [size_id], references: [id])

  @@map("product_sizes")
}

model ProductOptionValue {
  id Int @id @default(autoincrement())

  product_id      Int
  option_value_id Int

  product      Product     @relation(fields: [product_id], references: [id])
  option_value OptionValue @relation(fields: [option_value_id], references: [id])

  @@map("product_option_values")
}

model ProductTopping {
  id Int @id @default(autoincrement())

  product_id Int
  topping_id Int

  product Product @relation(fields: [product_id], references: [id])
  topping Topping @relation(fields: [topping_id], references: [id])

  @@map("product_toppings")
}

model ProductImage {
  id         Int    @id @default(autoincrement())
  image_name String
  sort_index Int

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  @@map("product_images")
}

model Order {
  id             Int             @id @default(autoincrement())
  note           String?
  original_price Float
  final_price    Float
  created_at     DateTime        @default(now())
  order_details  OrderDetail[]
  status         String          @default("pending") // pending, confirmed, preparing, delivered, cancelled
  PaymentDetail  PaymentDetail[]
  
  customerPhone  String?
  Customer       User?           @relation("CustomerOrders", fields: [customerPhone], references: [phone_number])
 
  staffId        Int
  Staff          User            @relation("StaffOrders", fields: [staffId], references: [id])

  @@map("orders")
}

model OrderDetail {
  id         Int   @id @default(autoincrement())
  quantity   Int
  unit_price Float

  order_id Int
  order    Order @relation(fields: [order_id], references: [id])

  product_id         Int
  product            Product              @relation(fields: [product_id], references: [id])
  size_id            Int?
  size               Size?                @relation(fields: [size_id], references: [id])
  ToppingOrderDetail ToppingOrderDetail[]

  @@map("order_details")
}

model ToppingOrderDetail {
  id         Int   @id @default(autoincrement())
  quantity   Int
  unit_price Float

  order_detail_id Int
  order_detail    OrderDetail @relation(fields: [order_detail_id], references: [id])

  topping_id Int
  topping    Topping @relation(fields: [topping_id], references: [id])

  @@map("topping_order_details")
}

model PaymentModel {
  id            Int             @id @default(autoincrement())
  name          String
  is_active     Boolean         @default(true)
  created_at    DateTime        @default(now())
  PaymentDetail PaymentDetail[]

  @@map("payment_models")
}

model PaymentDetail {
  id               Int          @id @default(autoincrement())
  payment_model    PaymentModel @relation(fields: [payment_model_id], references: [id])
  payment_model_id Int
  order            Order        @relation(fields: [order_id], references: [id])
  order_id         Int
  amount           Float
  paymentcode      String?
  payment_time     DateTime     @default(now())
  status           String       @default("completed") // completed, failed, pending

  @@map("payment_details")
}
